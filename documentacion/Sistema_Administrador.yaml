openapi: 3.0.3
info:
  title: Sintergica API v2
  description: API para gestión de usuarios, grupos y roles recuerda enviar el token de acceso en el header
  version: 2.0.0
servers:
  - url: http://localhost:8080
    description: Servidor local de desarrollo

paths:
  /users/register:
    post:
      tags:
        - users
      summary: correo y contraseña que sean validos con los estandares
      description: No requiere rol administrador
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - lastName
                - rol
                - company
              properties:
                email:
                  type: string
                  format: email
                  example: "username@host.com"
                  description: "ingresa un email valido sino no te dejare meterlo a la base de datos"
                password:
                  type: string
                  example: "123"
                  description: "La contraseña por lo menos deberá ser de longitud mayor a 2"
                name:
                  type: string
                  example: "Nombre"
                lastName:
                  type: string
                  example: "Apellido"
                rol:
                  allOf:
                    - $ref: '#/components/schemas/Rol'
                  nullable: true
                  example: null
                  description: "Debes incluir este campo y este debera ser null"
                company:
                  allOf:
                    - $ref: '#/components/schemas/Company'
                  nullable: true
                  example: null
                  description: "Debes incluir el campo y este debera ser null"
      responses:
        200:
          description: "Se registra un nuevo usuario en la base de datos"
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  name:
                    type: string
                  lastName:
                    type: string
                  token:
                    type: string
                    example: "asdni3ip3@sds"
                    description: "Token de acceso que debes incluir en los headers para tener acceso a enpoints"
        409:
          description: "Ya existe un usuario con este correo"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"

  /users/login:
    post:
      tags:
        - users
      summary: "Iniciar sesión"
      description: "No se requiere rol administrador"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@host.com"
                  description: "user@host.com"
                password:
                  type: string
                  example: "123"
                  description: "123"
      responses:
        200:
          description: "El usuario inicia sesión"
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  name:
                    type: string
                  lastName:
                    type: string
                  token:
                    type: string
                    example: "asdni3ip3@sds"
                    description: "Token de acceso que debes incluir en los headers para tener acceso a enpoints"
        404:
          description: "Usuario no registrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"
        401:
          description: "Contraseña incorrecta"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"

  /users/{username}/search:
    get:
      tags:
        - users
      description: "**Ejemplo de solicitud:**\n`GET /users/john.doe/search?page=1&size=10`"
      security:
        - JWT: []
      parameters:
        - name: username
          in: path
          required: true
          example: 'Pedro'
          schema:
            type: string
            format: string
        - name : page
          in: query
          required: true
          example: '0'
          schema:
            type: integer
            format: integer
        - name: size
          in: query
          required: true
          example: '10'
          schema:
            type: integer
            format: integer


      responses:
        200:
          description: "Exito"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userDTOPage:
                    type: array
                    items:
                      type: object
                      properties:
                        email:
                          type: string
                          example: "alice@gmail.com"
                        username:
                          type: string
                          example: "Alice"
                        rol:
                          type: object
                          properties:
                            id:
                              type: string
                              example: "c27ecb66-e1b8-4212-8508-73dc6e6d6977"
                            name:
                              type: string
                              example: "ADMIN"
                        numberGroups:
                          type: integer
                          example: 1
                  currentPage:
                    type: integer
                    example: 0
                  totalPages:
                    type: integer
                    example: 1
                  totalElements:
                    type: integer
                    example: 1


  /company:
    get:
      tags:
        - Company
      description: Te retorna toda la lista de empresas
      responses:
        200:
          description: "Exito"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Company"
    post:
      tags:
        - Company
      description: "Manda los datos en un JSON"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
      responses:
        200:
          description: "Compañía registrada"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"

  /company/uuid:

    get:
      security:
        - JWT: []
      tags:
        - Company
      description: "Obtienes datos de una empresa por medio de su uuid"
      summary: "Obtienes una compañia por medio del uuid"
      parameters:
        - name: uuid
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: "Respuesta"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"

  /company/clients:
    get:
      tags:
        - Company
      security:
        - JWT: []
      description : "Obtiene la lista de clientes asociados a una compañia"
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 0
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        "200":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WrapperUserDTO"
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"
        "403":
          description: compañia no encontrada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"



  /company/clients/email:
    post:
      security:
        - JWT : []
      description: "Añade un nuevo cliente a la compañia"
      summary: "Agrega un cliente nuevo a una compañia y esta se obtiene del usuario que ha iniciado sesión"
      tags:
        - Company
      parameters:
        - name: email
          in: query
          description: "email del cliente que quieres agregar a la compañia y este no debe tener una compañia asociada"
          required: true
          schema:
            format: email
            type: string
      responses:
        200:
          description: "Exito"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyDTO"
        404:
          description: "Compañia no encontrada o usuario no encontrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"
        409:
          description: "El usuario ya tiene asociada una compañia"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"

  /company/groups:
    get:
      security:
        - JWT: []
      tags:
        - Company
      description: ""
      summary: "Obtiene la compañia del usuario que ha iniciado sesión y a partir de esta se obtienen los grupos pertenecientes a esta"
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 0
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        200:
          description: "Lista de grupos asociados"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WrapperUserDTO"
        404:
          description: "Usuario sin compañia asociada"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"

  /group:
    get:
      tags:
        - Groups
      description: Te retorna toda la lista de grupos
      responses:
        200:
          description: "Exito"
          content:
            application/json:
              schema:
                type: array
                description: "Retorno una lista de grupos"
                items:
                  $ref: "#/components/schemas/Group"
    post:
      tags:
        - Groups
      description: "Manda los datos en un JSON"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        200:
          description: "Grupo registrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

  /group/uuid:
    get:
      tags:
        - Groups
      description: " Puedes obtener estos uuid haciendo uso del endpoint get o buscando alguna compañia asociada del usuario "
      summary: "Obtienes datos de un grupo por medio de su uuid"
      parameters:
        - name: uuid
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: "Respuesta"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

  /{uuid}/clients/{email}:
    post:
      tags:
        - Groups
      summary: Agregar cliente de un grupo
      security:
        - JWT: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Cliente eliminado del grupo correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDTO"
        "404":
          description: Grupo no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"
        "403":
          description: Usuario sin permisos suficientes (si no tiene rol 'ADMIN')

    delete:
      tags:
        - Groups
      summary: Eliminar cliente de un grupo
      security:
        - JWT: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Cliente eliminado del grupo correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDTO"
        "404":
          description: Grupo no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"
        "403":
          description: Usuario sin permisos suficientes (si no tiene rol 'ADMIN')


components:

  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT  # Especifica que el token es JWT

  schemas:
    CompanyDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        emailClient:
          type: string
        Rol:
          $ref: '#/components/schemas/Rol'


    Warnings:
      type: object
      properties:
        error:
          type: string
        date:
          type: string
          format: date-time

    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    Rol:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    User:
      type: object
      required:
        - rol
        - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        rol:
          allOf:
            - $ref: '#/components/schemas/Rol'
          nullable: true
        company:
          allOf:
            - $ref: '#/components/schemas/Company'
          nullable: true
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'

    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupDTO'

    GroupDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    WrapperUserDTO:
      type: object
      properties:
        userDTOPage:
          type: array
          description: Lista paginada de usuarios
          items:
            $ref: '#/components/schemas/UserDTO'
        currentPage:
          type: integer
          description: Número de página actual (0-based)
          example: 0
        totalPages:
          type: integer
          description: Total de páginas disponibles
          example: 1
        totalElements:
          type: integer
          description: Total de registros encontrados
          example: 4

    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string



