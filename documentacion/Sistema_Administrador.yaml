openapi: 3.0.3
info:
  title: Sintergica API v2
  description: API para gestión de usuarios, grupos y roles recuerda enviar el token de acceso en el header
  version: 2.0.0
servers:
  - url: http://localhost:8080
    description: Servidor local de desarrollo

paths:
  /user/register:
    post:
      tags:
        - Registro
      summary: correo y contraseña que sean validos con los estandares
      description: No requiere rol administrador
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  required: true
                  example: "username@host.com"
                  description: "ingresa un email valido sino no te dejare meterlo a la base de datos"
                  format: email
                  type: string
                password:
                  required: true
                  example: "123"
                  description: "La contraseña por lo menos deberá ser de longitud mayor a 2"
                  type: string
                name:
                  required: true
                  example: "Nombre"
                  type: string
                lastName:
                  required: true
                  example: "Apellido"
                  type: string
                rol:
                  required: true
                  example: "null"
                  type: null
                  description: "Debes incluir este campo y este debera ser null"
                company:
                  required: true
                  example: "null"
                  type: null
                  description: "Debes incluir el campo y este debera ser null"
      responses:
        200:
          description: "Se registra un nuevo usuario en la base de datos"
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  name:
                    type: string
                  lastName:
                    type: string
                  token:
                    type: string
                    example: "asdni3ip3@sds"
                    description: "Token de acceso que debes incluir en los headers para tener acceso a enpoints"
        409:
          description: "Ya existe un usuario con este correo"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"

  /user/login:
    post:
      tags:
        - Login
      summary: "Iniciar sesión"
      description: "No se requiere rol administrador"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  example: "user@host.com"
                  type: string
                  description: "user@host.com"
                password:
                  example: "123"
                  type: string
                  description: "123"
      responses:
        200:
          description: "El usuario inicia sesión"
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  name:
                    type: string
                  lastName:
                    type: string
                  token:
                    type: string
                    example: "asdni3ip3@sds"
                    description: "Token de acceso que debes incluir en los headers para tener acceso a enpoints"
        404:
          description: "Usuario no registrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"
        401:
          description: "Contraseña incorrecta"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"
  /company:
    get:
      tags:
        - Obtener el catalogo de compañias
      description: Te retorna toda la lista de empresas
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                description: "Retorno una lista de empresas"
                $ref: "#/components/schemas/Company"
    post:
      tags:
        - Registra una nueva empresa en el sistema
      description: "Manda los datos en un JSON"
      requestBody:
        content:
          application/json:
            schema:
              description: "Esquema de datos"
              $ref: "#/components/schemas/Company"
      responses:
        200:
          $ref: "#/components/schemas/Company"
  /company/uuid:
    get:
      description: "Obtienes datos de una empresa por medio de su uuid"
      summary: "Puedes obtener estos uuid haciendo uso del endpoint get o buscando alguna compañia asociada del usuario"
      parameters:
        - name: uuid
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: "Respuesta"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"

  /company/uuid/clients/email:
    post:
      description: "Añade un nuevo cliente a la compañia"
      summary: "Ideal para meterle la compañia a un cliente"
      parameters:
        - name: uuid
          in: query
          description: "clave uuid de la empresa"
          required: true
          schema:
            format: uuid
            type: string
        - name: email
          in: query
          description: "email del cliente que quieres agregar a la compañia y este no debe tener una compañia asociada"
          required: true
          schema:
            format: email
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: "Compañia no encontrada o usuario no encontrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"
        409:
          description: "El usuario ya tiene asociada una compañia"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"
  /company/groups:
    get:
      description: "Obtiene todos los grupos asociados a esta compañia mediante el usuario que ha iniciado sesion si el usuario que inicio sesion es admin pero no tiene una compañia asociada entonces no tendras grupos"
      summary: "Catalogos de grupos que pertenecen a una compañia"
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 0
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        200:
          description: "Lista de grupos asociados"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WrapperUserDTO"
        404:
          description: "Usuario sin compañia asociada"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"

  /group:
    get:
      tags:
        - Obtener el catalogo de grupos
      description: Te retorna toda la lista de grupos
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                description: "Retorno una lista de grupos"
                $ref: "#/components/schemas/Group"
    post:
      tags:
        - Registra un grupo en el sistema
      description: "Manda los datos en un JSON"
      requestBody:
        content:
          application/json:
            schema:
              description: "Esquema de datos"
              $ref: "#/components/schemas/Group"
      responses:
        200:
          $ref: "#/components/schemas/Group"

  /group/uuid:
    get:
      description: " Puedes obtener estos uuid haciendo uso del endpoint get o buscando alguna compañia asociada del usuario "
      summary: "Obtienes datos de un grupo por medio de su uuid"
      parameters:
        - name: uuid
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: "Respuesta"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

  /groups/{uuid}/clients/{email}:
    post:
      operationId: addGroup
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID del grupo
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          description: Email del usuario
      responses:
        200:
          description: Usuario agregado al grupo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        404:
          description: Grupo no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"
        409:
          description: Conflicto de empresa usuario/grupo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warnings"


components:
  schemas:
    Warnings:
      type: object
      properties:
        error:
          type: string
        date:
          type: string
          format: Date
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    Rol:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          required: false
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        rol:
          $ref: '#/components/schemas/Rol'
          example: "null"
          required: true
        company:
          $ref: '#/components/schemas/Company'
          required: true
          example: "null"
        groups:
          required: false
          type: array
          items:
            $ref: '#/components/schemas/Group'

    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupDTO'

    GroupDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    WrapperUserDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
            pageSize:
              type: integer
        totalElements:
          type: integer

    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

