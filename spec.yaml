openapi: 3.0.3
info:
  title: Sintergica API v2
  description: RESTAPI Sintergica there are many endpoints which you can use to get information from the database but remember you need to be authenticated for some endpoints
  version: 2.0.1
servers:
  - url: 'http://3.144.151.147:80'
    description: 'Enverioment in the cloud, but it is not working at the moment'
paths:
  /users/register:
    post:
      tags:
        - users
      summary: only email and password with correct format
      description: Its a public endpoint
      parameters:
        - name: signInToken
          description: 'Invitation token this is obtained from invitation see the documentation, this is required to register a new user with invitation token else you will able to register without invitation token be a normal user with Rol equals to USER'
          in: query
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - lastname
              properties:
                email:
                  type: string
                  format: email
                  example: username@host.com
                  description: Send the email in this format
                password:
                  type: string
                  example: '123'
                  description: the password must be at least 3 characters long
                name:
                  type: string
                  example: Name
                lastName:
                  type: string
                  example: LastName
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
                  lastName:
                    type: string
                  token:
                    type: string
                    example: asdni3ip3@sds
                    description: Bearer token
                  refreshToken:
                    type: string
                    example: aspdasndi@ads
                    description: Refresh token
                  role:
                    type: string
        '409':
          description: 'Email conflict, there is already a user with this email'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  /users/login:
    post:
      tags:
        - users
      summary: Singin with email and password
      description: This is a public endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@host.com
                  description: user@host.com
                password:
                  type: string
                  example: '123'
                  description: '123'
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
                  last_name:
                    type: string
                  token:
                    type: string
                    example: asdni3ip3@sds
                    description: add this token in the Authorization header
                  refreshToken:
                    type: string
                    example: aspdasndi@ads
                    description: add this token in the Authorization header for obtaining a new token
                  role:
                    $ref: '#/components/schemas/Warnings'
        '401':
          description: Contrase침a incorrecta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
        '404':
          description: Usuario no registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  /users/change-password:
    patch:
      tags:
        - users
      summary: PATCH users/change-password
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PasswordChangeNotificationDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  /users/forgot-password:
    post:
      tags:
        - users
      summary: POST users/forgot-password
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ChangePasswordDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  '/users/{email}/rol':
    patch:
      tags:
        - users
      summary: modify user rol
      security:
        - JWT: []
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolRequestBodyDTO'
      responses:
        '200':
          description: Cambio de rol exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolUserDTO'
  /users/refreshToken:
    post:
      tags:
        - users
      summary: This endpoint requires a refresh token in the headers you will not included the token session in the headers you will get a new token
      description: Sends a refresh token
      security:
        - JWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
                  lastName:
                    type: string
                  token:
                    type: string
                    example: asdni3ip3@sds
                    description: Token de acceso que debes incluir en los headers para tener acceso a enpoints
                  refreshToken:
                    type: string
                    example: aspdasndi@ads
                    description: Envia este token en el encabezado en vez de el token de session para obtener otro m치s
                  rol:
                    $ref: '#/components/schemas/Rol'
        '403':
          description: token invalidado o baneado porque cerraste la sesi칩n
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  /users/logout:
    post:
      tags:
        - users
      description: 'Sends a refresh token, and it will be invalidated and you cant use it anymore and you cant generate new tokens'
      summary: 'Sends a refresh token, and it will be invalidated and you cant use it anymore and you cant generate new tokens'
      security:
        - JWT: []
      responses:
        '200':
          description: Retorno del token bloqueado
          content:
            application/json:
              schema:
                type: object
                properties:
                  refreshToken:
                    type: string
                  email:
                    type: string
        '403':
          description: token invalidado o baneado porque cerraste la sesi칩n
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  '/company/users/{username}':
    get:
      tags:
        - Company
      description: |-
        **Ejemplo de solicitud:**
        `GET company/users/john.doe/search?page=1&size=10`
      security:
        - JWT: []
      parameters:
        - name: username
          in: path
          required: true
          example: Pedro
          schema:
            type: string
            format: string
        - name: page
          in: query
          required: true
          example: '0'
          schema:
            type: integer
            format: integer
        - name: size
          in: query
          required: true
          example: '10'
          schema:
            type: integer
            format: integer
      responses:
        '200':
          description: Exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  userDTOPage:
                    type: array
                    items:
                      type: object
                      properties:
                        email:
                          type: string
                          example: alice@gmail.com
                        username:
                          type: string
                          example: Alice
                        rol:
                          type: object
                          properties:
                            id:
                              type: string
                              example: c27ecb66-e1b8-4212-8508-73dc6e6d6977
                            name:
                              type: string
                              example: ADMIN
                        numberGroups:
                          type: integer
                          example: 1
                  currentPage:
                    type: integer
                    example: 0
                  totalPages:
                    type: integer
                    example: 1
                  totalElements:
                    type: integer
                    example: 1
  /company:
    get:
      tags:
        - Company
      security:
        - JWT: []
      description: Te retorna toda la lista de empresas
      responses:
        '200':
          description: Exito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
    post:
      tags:
        - Company
      description: Manda los datos en un JSON
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '200':
          description: Compa침칤a registrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
  '/company/{uuid}':
    get:
      security:
        - JWT: []
      tags:
        - Company
      description: Obtienes datos de una empresa por medio de su uuid
      summary: Obtienes una compa침ia por medio del uuid
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Respuesta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
  /company/users:
    get:
      tags:
        - Company
      security:
        - JWT: []
      description: Obtiene la lista de clientes asociados a una compa침ia
      parameters:
        - name: page
          in: query
          description: page
          required: false
          schema:
            type: integer
            minimum: 0
        - name: size
          in: query
          description: size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: fullname
          in: query
          description: nombre completo del cliente ('opcional')
          required: false
          schema:
            type: string
        - name: groups
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WrapperUserDTO'
        '403':
          description: Falta de permisos para acceder a este recurso o el token es invalido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  '/company/groups/{group_id}/members':
    patch:
      summary: 'PATCH company/groups/{group_id}/members'
      operationId: listMembersGroup
      tags:
        - Company
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WrapperListOfUsers'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupCreatedDTO'
  '/company/users/{email}/groups':
    get:
      security:
        - JWT: []
      tags:
        - Company
      parameters:
        - name: email
          in: path
          required: true
          schema:
            format: email
            type: string
      responses:
        '200':
          description: Exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  userEmail:
                    type: string
                    format: email
                    example: Ethan@gmail.com
                  groups:
                    type: array
                    items:
                      type: object
                      required:
                        - group_id
                        - name
                      properties:
                        group_id:
                          type: string
                          format: string
                          example: Ventas-Sintergicaxbzsa23
                        name:
                          type: string
                          example: VENTAS
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
    patch:
      security:
        - JWT: []
      tags:
        - Company
      parameters:
        - name: email
          in: path
          required: true
          schema:
            format: email
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - group_ids
              properties:
                group_ids:
                  type: array
                  items:
                    type: string
                  example:
                    - VENTAS-SINTERGICA
                    - CONTADORES-SINTERGICA
                    - IT-SINTERGICA
                    - test-SINTERGICA
      responses:
        '200':
          description: Exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  userEmail:
                    type: string
                    format: email
                    example: Ethan@gmail.com
                  groups:
                    type: array
                    items:
                      type: object
                      required:
                        - group_id
                        - name
                      properties:
                        group_id:
                          type: string
                          format: string
                          example: Ventas-Sintergicaxbzsa23
                        name:
                          type: string
                          example: VENTAS
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  '/company/users/{email}':
    post:
      security:
        - JWT: []
      description: A침ade un nuevo cliente a la compa침ia
      summary: Agrega un cliente nuevo a una compa침ia y esta se obtiene del usuario que ha iniciado sesi칩n
      tags:
        - Company
      parameters:
        - name: email
          in: path
          description: email del cliente que quieres agregar a la compa침ia y este no debe tener una compa침ia asociada
          required: true
          schema:
            format: email
            type: string
      responses:
        '200':
          description: Exito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDTO'
        '404':
          description: Compa침ia no encontrada o usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
        '409':
          description: El usuario ya tiene asociada una compa침ia
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
    delete:
      security:
        - JWT: []
      description: A침ade un nuevo cliente a la compa침ia
      summary: Elimina un cliente nuevo a una compa침ia y esta se obtiene del usuario que ha iniciado sesi칩n
      tags:
        - Company
      parameters:
        - name: email
          in: path
          description: email del cliente que quieres agregar a la compa침ia y este no debe tener una compa침ia asociada
          required: true
          schema:
            format: email
            type: string
      responses:
        '200':
          description: Exito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDTO'
        '404':
          description: Compa침ia no encontrada o usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  /company/groups:
    get:
      security:
        - JWT: []
      tags:
        - Company
      description: ''
      summary: Obtiene la compa침ia del usuario que ha iniciado sesi칩n y a partir de esta se obtienen los grupos pertenecientes a esta
      operationId: getGroupsCompany
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetGroupDTO'
        '404':
          description: Usuario sin compa침ia asociada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  /group:
    get:
      tags:
        - Groups
      description: Te retorna toda la lista de grupos
      security:
        - JWT: []
      responses:
        '200':
          description: Exito
          content:
            application/json:
              schema:
                type: array
                description: Retorno una lista de grupos
                items:
                  $ref: '#/components/schemas/GroupCreatedDTO'
    post:
      tags:
        - Groups
      summary: 'Only sends attributes name, users and groupKey'
      operationId: addGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreatedDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GroupCreatedDTO'
  '/group/{groupID}':
    get:
      tags:
        - Groups
      description: ' Puedes obtener estos uuid haciendo uso del endpoint get o buscando alguna compa침ia asociada del usuario '
      summary: Get a group by id but you need to send the token authenticated
      security:
        - JWT: []
      parameters:
        - name: groupID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Respuesta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupCreatedDTO'
        '404':
          description: Grupo no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
    delete:
      tags:
        - Groups
      security:
        - JWT: []
      parameters:
        - name: groupID
          in: path
          required: true
          schema:
            type: string
            format: composite key
      responses:
        '200':
          description: Respuesta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDTO'
        '404':
          description: Grupo no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
  '/company/groups/{groupID}/member/{email}':
    post:
      tags:
        - Company
      summary: Agregar cliente de un grupo
      security:
        - JWT: []
      parameters:
        - name: groupID
          in: path
          required: true
          schema:
            type: string
            format: name
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cliente eliminado del grupo correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDTO'
        '403':
          description: Usuario sin permisos suficientes (si no tiene rol 'ADMIN')
        '404':
          description: Grupo no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
    delete:
      tags:
        - Company
      summary: Send composite Group's Key in the name path
      security:
        - JWT: []
      parameters:
        - name: groupID
          in: path
          required: true
          schema:
            type: string
            format: composite key
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cliente eliminado del grupo correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDTO'
        '403':
          description: Usuario sin permisos suficientes (si no tiene rol 'ADMIN')
        '404':
          description: Grupo no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warnings'
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        email:
          type: string
          format: string
        name:
          type: string
          format: string
        last_name:
          type: string
          format: string
        token:
          type: string
          format: string
        refreshToken:
          type: string
          format: string
        Rol:
          $ref: '#/components/schemas/Rol'
    CompanyDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        emailClient:
          type: string
        isActive:
          type: boolean
        Rol:
          $ref: '#/components/schemas/Rol'
    Warnings:
      type: object
      properties:
        error:
          type: string
        date:
          type: string
          format: date-time
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Rol:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      example:
        id: 1237d4bc-5ea4-4967-8971-8f6f96d84167
        name: USER
    User:
      type: object
      required:
        - rol
        - company
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        rol:
          allOf:
            - $ref: '#/components/schemas/Rol'
          nullable: true
        company:
          allOf:
            - $ref: '#/components/schemas/Company'
          nullable: true
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupDTO'
    GroupDTO:
      type: object
      properties:
        group_id:
          type: string
          format: string
        name:
          type: string
    WrapperUserDTO:
      type: object
      properties:
        data:
          type: array
          description: Lista paginada de usuarios
          items:
            $ref: '#/components/schemas/UserDTO'
        currentPage:
          type: integer
          description: N칰mero de p치gina actual (0-based)
          example: 0
        totalPages:
          type: integer
          description: Total de p치ginas disponibles
          example: 1
        totalElements:
          type: integer
          description: Total de registros encontrados
          example: 4
    SearchUserDTO:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
                format: email
                example: jhon@gmail.com
              username:
                type: string
                example: jhon
              rol:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: 1237d4bc-5ea4-4967-8971-8f6f96d84167
                  name:
                    type: string
                    enum:
                      - USER
                    example: USER
              numberGroups:
                type: integer
                example: 1
        currentPage:
          type: integer
          example: 0
        totalPages:
          type: integer
          example: 1
        totalElements:
          type: integer
          example: 1
    GroupCreatedDTO:
      type: object
      properties:
        groupKey:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        users:
          type: array
          nullable: true
          items:
            type: string
            format: email
          uniqueItems: true
        dateCreation:
          type: string
          format: date-time
          nullable: true
        dateEdit:
          type: string
          format: date-time
          nullable: true
        createdBy:
          type: string
          nullable: true
    RolRequestBodyDTO:
      type: object
      properties:
        name:
          type: string
    GroupCreatedDTOPost:
      type: object
      required:
        - groupKey
        - name
        - users
      properties:
        groupKey:
          type: string
        name:
          type: string
        users:
          type: array
          items:
            type: string
            format: uuid
    RolUserDTO:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        lastName:
          type: string
        rol:
          $ref: '#/components/schemas/Rol'
    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    ForgotPasswordDTO:
      type: object
      properties:
        email:
          type: string
    ChangePasswordDTO:
      type: object
      properties:
        token:
          type: string
          format: uuid
        password:
          type: string
    WrapperListOfUsers:
      type: object
      properties:
        emailsMembers:
          type: array
          nullable: true
          items:
            type: string
            format: email
    PasswordChangeNotificationDTO:
      type: object
      properties:
        email:
          type: string
        uuid:
          type: string
        expiredAt:
          type: string
          format: date-time
    GetUserDTO:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        lastName:
          type: string
        rol:
          $ref: '#/components/schemas/Rol'
    GetGroupDTO:
      type: object
      properties:
        group_id:
          type: string
        name:
          type: string
        userCreator:
          $ref: '#/components/schemas/GetUserDTO'
        creationDate:
          type: string
          format: date-time
        editDate:
          type: string
          format: date-time
        users:
          type: array
          items:
            $ref: '#/components/schemas/GetUserDTO'
